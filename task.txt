Task: Image data labeling tool

This tool is designed to annotate cars based on images. Upon opening the tool, users are
presented with two main options: "Start New Annotation" and "Load Existing Annotation."

Start new annotation
    ● Users can upload an image from their computer, which will be displayed on a canvas.
    ● They can annotate the image by drawing rectangles around cars.
    ● A "Save" button will allow users to save their annotations and the associated image to
    the backend.
    ● Before saving, the system must validate that no two annotations (rectangles) overlap.
    If at least two annotations overlap, the system should return an error and prevent
    saving.

Load existing annotation
    ● Users can view a list of previously saved annotations, with one entry per image.
    ● Selecting an annotation will load the corresponding image and its annotations onto
    the canvas.
    ● Users can continue annotating by adding more rectangles or deleting existing ones.
    ● Updated annotations can be saved back to the backend.

Requirements
    Frontend (canvas drawing)
        ● Create a simple canvas-based interface for labeling objects in an image.
        ● Include functionality to:
        ❖ Open an image from the user's local system and display it on the canvas.
        ❖ Allow users to draw rectangles around cars in the image.
        ❖ Add a "Save" button to save the labeled data.
        ❖ Implement a "Clear Annotations" button to remove all labels.
        ❖ Allow users to click on a rectangle to remove it.

    Backend (API)
        ● Develop API endpoints to save the labeled data (bounding boxes and metadata) along
        with the image le in the database.
        ● Save the image as binary data in the database.
        ● The backend implementation must be done in Python, and you are free to use any
        library of your choice.

    Database
        ● You are free to design and implement the database structure as you see t,
        considering the requirements.

    Deliverables
        ● A working application demonstrating the above functionality.
        ● Code should be well-commented and follow best practices.
        ● Submit the database schema and a brief README on how to set up and test the
        application.
        ● Push to GitHub.


What is going to be evaluated
    1. Code clarity
        ● The code should be clean, readable, and well-structured.
        ● Proper use of comments to explain complex or non-obvious logic.
    2. Solution optimization
        ● Ensure the solution is efcient in terms of performance and resource usage.
        ● Minimize redundant operations and ensure scalability for large images or multiple
        annotations.
        ● Optimize backend responses and database queries for fast data retrieval and storage.
    3. Error handling and validation
        ● Proper validation of user inputs (e.g., preventing overlapping rectangles).
        ● Handle edge cases gracefully without crashes or unexpected behavior.
        ● Provide clear and informative error messages to the user.













from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from app.core.config import settings
from app.db.db import Base
from app.db.models import *
from alembic import context
import os

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# set the sqlalchemy.url using environment variables
url = f"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB')}"
config.set_main_option("sqlalchemy.url", url)

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
